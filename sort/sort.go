package main

import "fmt"
import "time"

// InsertSort implementation
func InsertSort(arr []int) {
	len := cap(arr)
	// fmt.Printf("%p %p %p\n", &arr, arr, *arr, *(&arr[1]))
	// fmt.Println(len)

	for i := 1; i < len; i++ { // 从位置N开始
		value := arr[i]
		j := i - 1
		for ; j >= 0; j-- { //与为准0开始进行比较
			if arr[j] > value {
				arr[j+1] = arr[j]
			} else {
				break
			}
		}
		arr[j+1] = value
	}

}

func main() {
	fmt.Println("hello world")

	arrb := []int{3, 5, 8, 10, 12, 15}
	arra := []int{1, 2, 5, 7, 9, 10, 20, 25}
	i, j := 0, 0

	// k := 0
	// fmt.Println(arra[k])

	tmp := make([]int, 0)

	for i+j < len(arra)+len(arrb) {
		if j >= len(arrb) || i < len(arra) && arra[i] < arrb[j] {
			tmp = append(tmp, arra[i])
			i++
		} else {
			tmp = append(tmp, arrb[j])
			j++
		}
	}
	fmt.Println(tmp)

	array := []int{5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9}

	//fmt.Printf("%p %p %p\n", &array, &array[0], &array[1])
	st := time.Now()

	InsertSort(array)
	et := time.Now().Sub(st)
	fmt.Println("插入排序", et, array)
	return
	array = []int{5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9}

	st = time.Now()
	qsort(array)
	et = time.Now().Sub(st)

	fmt.Println("快速排序", et)

	array = []int{5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9}
	st = time.Now()
	MergeSort(array)
	et = time.Now().Sub(st)
	fmt.Println("归并排序", et)

	array = []int{5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9, 5, 1, 8, 10, 5, 3, 2, 9}
	st = time.Now()
	arr := merge1(array[:])
	et = time.Now().Sub(st)
	fmt.Println("归并排序1", et)
	fmt.Println(arr)

	var aa = []int{1000, 2, 31, 34, 5, 9, 7, 4, 6, 89, 90, 99, 99, 99, 99, 99}

	var bb = merge1(aa)
	fmt.Println(bb)
}

func merge1(data []int) []int {
	sum := len(data)
	if sum <= 1 {
		return data
	}
	left := data[0 : sum/2]
	lSize := len(left)
	if lSize >= 2 {
		left = merge1(left)
	}
	right := data[sum/2:]
	rSize := len(right)
	if rSize >= 2 {
		right = merge1(right)
	}
	j := 0
	t := 0
	arr := make([]int, sum)
	//fmt.Println(left, right, data)
	for i := 0; i < sum; i++ {
		if j < lSize && t < rSize {
			if left[j] <= right[t] {
				arr[i] = left[j]
				j++
			} else {
				arr[i] = right[t]
				t++
			}
		} else if j >= lSize {
			arr[i] = right[t]
			t++
		} else if t >= rSize {
			arr[i] = left[j]
			j++
		}
	}
	return arr
}

func qsort(data []int) {
	if len(data) <= 1 {
		return
	}
	mid := data[0]
	head, tail := 0, len(data)-1
	for i := 1; i <= tail; {
		if data[i] > mid {
			data[i], data[tail] = data[tail], data[i]
			tail--
		} else {
			data[i], data[head] = data[head], data[i]
			head++
			i++
		}
	}
	qsort(data[:head])
	qsort(data[head+1:])
}

func MergeSort(array []int) []int {
	n := len(array)
	if n < 2 {
		return array
	}
	key := n / 2
	left := MergeSort(array[0:key])
	right := MergeSort(array[key:])
	return merge(left, right)
}

func merge(left []int, right []int) []int {
	tmp := make([]int, 0)
	i, j := 0, 0
	for i < len(left) && j < len(right) {
		if left[i] < right[j] {
			tmp = append(tmp, left[i])
			i++
		} else {
			tmp = append(tmp, right[j])
			j++
		}
	}
	tmp = append(tmp, left[i:]...)
	tmp = append(tmp, right[j:]...)
	return tmp
}
